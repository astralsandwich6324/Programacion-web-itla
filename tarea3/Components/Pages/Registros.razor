@page "/registro"
@inject NavigationManager NavMan
@rendermode InteractiveServer
@using System.Text.Json
@inject IJSRuntime JSx

<h3>Registros Recibidos</h3>

<!-- Mini Dashboard -->
@if (registros != null && registros.Any())
{
    <div class="row text-center mb-3">
        <div class="col">
            <h5>Total de Accidentes</h5>
            <p>@registros.Count</p>
        </div>
        <div class="col">
            <h5>Total de Vehículos Involucrados</h5>
            <p>@registros.Sum(r => r.VehiculosInvolucrados)</p>
        </div>
        <div class="col">
            <h5>Total de Muertos</h5>
            <p>@registros.Sum(r => r.Muertos)</p>
        </div>
        <div class="col">
            <h5>Total de Heridos</h5>
            <p>@registros.Sum(r => r.Heridos)</p>
        </div>
    </div>
}

<!-- Botón para crear nuevo registro -->
<div class="text-end mb-3">
    <button class="btn btn-primary" @onclick="NuevoRegistro">Nuevo registro</button>
</div>

<!-- Tabla de registros -->
@if (registros != null && registros.Any())
{
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Fecha</th>
                <th>Descripción</th>
                <th>Costo Estimado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var registro in registros)
            {
                <tr>
                    <td>@registro.Fecha.ToShortDateString()</td>
                    <td>@((registro.Descripcion.Length > 30) ? registro.Descripcion.Substring(0, 30) + "..." : registro.Descripcion)</td>
                    <td><LabelDinero Valor="registro.CostoEstimado" /></td>
                    <td>
                        <button @onclick="() => editarFila(registro)" class="btn btn-primary btn-sm">Editar</button>
                        <button @onclick="() => eliminarFila(registro)" class="btn btn-danger btn-sm">Eliminar</button>
                        <button @onclick="() => imprimirX(registro)" class="btn btn-success btn-sm">Imprimir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No hay registros disponibles.</p>
}

@code {
    List<Reporte> registros = new List<Reporte>();

    private void imprimirX(Reporte registro)
    {
        JSx.InvokeVoidAsync("window.open", "registro/imprimir/" + registro.Id, "_blank");
    }

    private void NuevoRegistro()
    {
        NavMan.NavigateTo("registro/nuevo");
    }

    private void editarFila(Reporte registro)
    {
        NavMan.NavigateTo("registro/editar/" + registro.Id);
    }

    private async Task eliminarFila(Reporte registro)
    {
        var rs = await JSx.InvokeAsync<bool>("confirm", "¿Está seguro que desea eliminar este registro?");
        if (rs)
        {
            registros.Remove(registro);
            await JSx.InvokeVoidAsync("localStorage.setItem", "registros", JsonSerializer.Serialize(registros));
            StateHasChanged();
        }
    }

    // Cargar registros previos del local storage
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var registroJson = await JSx.InvokeAsync<string>("localStorage.getItem", "registros");
            if (!string.IsNullOrEmpty(registroJson))
            {
                registros = JsonSerializer.Deserialize<List<Reporte>>(registroJson);
                StateHasChanged();
            }
        }
    }
}
