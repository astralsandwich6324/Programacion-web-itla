@page "/entidad/{Tipo}/editar"
@page "/entidad/{Tipo}/editar/{id:int}"
@rendermode InteractiveServer
@inject NavigationManager NavMan
@inject IJSRuntime JSx
@inject SerieContext Sc

<PageTitle>Editar Entidad</PageTitle>

<h3>Editar Entidad @Tipo</h3>

<EditForm Model="@instancia" OnValidSubmit="GuardarDatos">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="nombre">Nombre:</label>
        <InputText id="nombre" class="form-control" @bind-Value="instancia.Nombre"/>
    </div>
    <br>
    <div class="form-group">
        <label for="apodo">Pais:</label>
        <InputText id="apodo" class="form-control" @bind-Value="instancia.Pais"/>
    </div>
    <br>
    <div class="form-group">
        <label for="idioma">Idioma:</label>
        <InputText id="idioma" class="form-control" @bind-Value="instancia.Idioma"/>
    </div>
    <br>
    <div class="form-group">
        <label for="resumen">Resumen:</label>
        <InputText id="resumen" class="form-control" @bind-Value="instancia.Resumen"/>
    </div>
    <br>
    <div class="form-group">
        <label for="fotoUrl">Foto:</label>
        <input type="url" id="fotoUrl" class="form-control" @bind="instancia.FotoUrl"/>
    </div>
    <br>
    

    <h4>Pesonajes</h4>

    <table class="table table-dark table-striped">
        <thead>
            <tr>
                <td></td>
            <th scope="col">Nombre</th>
            <th scope="col">Apodo</th>
            <th scope="col">Raza</th>
            <th scope="col">Foto</th>
            <th scope="col">Edad</th>
            <th scope="col">Signo Zodiacal</th>
            <th scope="col">Poder Caracteristico</th>
            <td><button type="button" class="btn btn-success" @onclick="agregarPersonaje">Agregar Personaje</button></td>
            </tr>
        </thead>
        <tbody>
            @foreach(var item in instancia.Personajes){
                <tr>
                    <td>
                        <img style="height:70px" src="@item.FotoUrl" alt="@item.Nombre">
                    </td>
                    <td><InputText @bind-Value="item.Nombre" class="form-control"/></td>
                    <td><InputText @bind-Value="item.Apodo" class="form-control"/></td>
                    <td><InputText @bind-Value="item.Raza" class="form-control"/></td>
                    <td><InputText @bind-Value="item.FotoUrl" class="form-control"/></td>
                    <td><InputNumber @bind-Value="item.Edad" class="form.control" /></td>
                    <td><InputText @bind-Value="item.SignoZodiacal" class="form-control"/></td>
                    <td><InputText @bind-Value="item.PoderCaracteristico" class="form-control"/></td>
                </tr>
            }
        </tbody>
    </table>

    <div class="text-center mt-3">
        <button type="submit" class="btn btn-success">Guardar</button>
    </div>

</EditForm>

@code {
    [Parameter]
    public string Tipo { get; set; } = "";

    [Parameter]
    public int Id { get; set; } = 0;

    void agregarPersonaje(){
        instancia.Personajes.Add(new Personaje());
        StateHasChanged();
    }

    SeriePeliculaLibro instancia = new SeriePeliculaLibro();
    TipoEntidad tipoEntidad;

    protected override async Task OnParametersSetAsync()
    {
        switch (Tipo)
        {
            case "libros":
                tipoEntidad = TipoEntidad.Libro;
                break;
            case "peliculas":
                tipoEntidad = TipoEntidad.Pelicula;
                break;
            case "series":
                tipoEntidad = TipoEntidad.Serie;
                break;
            default:
                NavMan.NavigateTo("/");
                break;
        }
    }

    private async Task GuardarDatos()
    {
        instancia.Tipo = tipoEntidad;

        Console.WriteLine("Guardando Datos");
        if(instancia.Id > 0){
            Sc.SeriePeliculasLibros.Update(instancia);
        }
        else{
            Sc.SeriePeliculasLibros.Add(instancia);
        }
        
        await Sc.SaveChangesAsync();
        await JSx.InvokeVoidAsync("alert", "Datos Guardados");
        NavMan.NavigateTo($"/entidad/{Tipo}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id > 0)
            {
                instancia = Sc.SeriePeliculasLibros.FirstOrDefault(x => x.Id == Id) ?? new SeriePeliculaLibro();
                StateHasChanged();
            }
        }
    }
}
